# JavaScript 到 Python 教程项目 - Cursor 规则

## 项目概述
这是一个专门为 JavaScript/前端开发者设计的 Python 学习教程项目。项目使用 Next.js + Fumadocs 构建文档网站，包含 10 个学习模块，并集成了交互式 Python 代码编辑器。

## 核心原则

### 1. 语言对比教学
- 始终从 JavaScript 开发者视角解释 Python 概念
- 提供 JS vs Python 的语法对比
- 使用前端开发者熟悉的术语和概念
- 强调两种语言的异同点
- 使用 `<PythonEditor>` 组件展示对比代码

### 2. 渐进式学习
- 按照模块顺序（0-9）组织内容
- 每个概念都要有实际代码示例
- 提供练习题和实战项目
- 确保学习路径的连贯性
- 从 Python 生态系统入门到高级语法应用

### 3. 实用性导向
- 重点讲解前端开发者最需要的 Python 技能
- 包含 Web 开发、数据处理、自动化脚本
- 提供真实项目案例
- 注重工程化实践
- 强调 AI 开发和数据科学应用

## 代码风格规范

### Python 代码
- 遵循 PEP 8 规范
- 使用类型注解（typing）
- 添加详细的注释和文档字符串
- 使用现代 Python 特性（3.8+）
- 使用 snake_case 命名规范

### JavaScript 对比代码
- 使用 ES6+ 语法
- 提供与 Python 代码功能相同的 JS 实现
- 标注语法差异和概念映射
- 使用 camelCase 命名规范

### 文档结构
- 使用 Markdown 格式
- 包含代码高亮和语法高亮
- 提供交互式代码示例
- 使用清晰的标题层级
- 集成 `<PythonEditor>` 组件

## 内容组织规则

### 每个模块应包含：
1. **概念介绍** - 从 JS 视角解释 Python 概念
2. **语法对比** - JS vs Python 的语法映射
3. **代码示例** - 使用 `<PythonEditor>` 展示可运行代码
4. **练习题** - 巩固学习内容
5. **实战项目** - 综合应用所学知识

### 代码示例要求：
- 使用 `<PythonEditor>` 组件包装代码
- 提供完整的可运行代码
- 包含错误处理和边界情况
- 添加详细的中文注释
- 提供测试用例
- 支持对比模式（compare={true}）

### PythonEditor 组件使用规范：
```mdx
<PythonEditor title="示例标题" compare={true}>
```javascript !! js
// JavaScript 代码
console.log("Hello World");
```

```python !! py
# Python 代码
print("Hello World")
```
</PythonEditor>

## 技术栈规范

### 文档网站
- Next.js 14+ (App Router)
- Fumadocs 文档框架
- Code Hike 代码高亮
- Tailwind CSS 样式
- Monaco Editor 代码编辑器
- Pyodide Python 运行时

### Python 环境
- Python 3.8+
- 虚拟环境管理（venv）
- 依赖管理（requirements.txt）
- 代码质量工具（ruff, black, mypy）
- Pyodide 浏览器端 Python 执行

### 开发工具
- VSCode 配置
- Python 扩展推荐
- 调试配置
- Git 工作流

## AI 助手行为准则

### 回答风格
- 使用中文回答
- 语言简洁明了
- 提供具体代码示例
- 解释概念时要有 JS 对比
- 推荐使用 PythonEditor 组件

### 代码生成
- 生成符合 PEP 8 的 Python 代码
- 提供对应的 JavaScript 对比代码
- 包含完整的错误处理
- 添加详细的中文注释
- 使用 PythonEditor 组件包装

### 问题解决
- 优先考虑前端开发者的思维习惯
- 提供多种解决方案
- 解释选择特定方案的原因
- 考虑性能和最佳实践
- 利用 Pyodide 进行代码验证

## 文件命名规范

### 文档文件
- 模块文档：`module-{number}-{name}.mdx`
- 示例代码：`examples/{category}/{name}.py`
- 练习题：`exercises/{module}/{name}.md`
- 项目文件：`projects/{name}/`

### 代码文件
- Python 文件：使用 snake_case
- 测试文件：`test_{module}.py`
- 配置文件：使用 kebab-case

### 组件文件
- React 组件：使用 PascalCase
- TypeScript 文件：使用 PascalCase
- 样式文件：使用 kebab-case

## 质量保证

### 代码质量
- 所有代码必须可运行
- 通过静态检查工具验证
- 包含适当的测试用例
- 遵循最佳实践
- 在 PythonEditor 中测试执行

### 文档质量
- 内容准确无误
- 示例代码完整
- 链接和引用正确
- 格式规范统一
- 交互式代码示例可用

### 用户体验
- 学习路径清晰
- 示例代码易懂
- 练习题难度适中
- 提供足够的上下文
- 代码编辑器响应迅速

## 特殊指令

### 当用户询问 Python 概念时：
1. 先解释对应的 JavaScript 概念
2. 展示 Python 的语法和用法
3. 提供对比示例（使用 PythonEditor）
4. 说明使用场景和注意事项

### 当用户需要代码示例时：
1. 使用 PythonEditor 组件包装代码
2. 提供完整的可运行代码
3. 包含对应的 JavaScript 实现
4. 添加详细的中文注释
5. 说明代码的工作原理

### 当用户遇到问题时：
1. 分析问题的根本原因
2. 提供多种解决方案
3. 解释每种方案的优缺点
4. 推荐最佳实践
5. 在 PythonEditor 中验证解决方案

## 项目维护

### 定期更新
- 保持 Python 版本兼容性
- 更新依赖包版本
- 检查示例代码的有效性
- 更新最佳实践建议
- 维护 Pyodide 版本

### 内容改进
- 根据用户反馈优化内容
- 添加更多实用示例
- 完善练习题和项目
- 更新技术栈和工具
- 优化 PythonEditor 组件性能

### PythonEditor 组件维护
- 确保 Pyodide 版本兼容性
- 优化代码执行性能
- 改进错误处理机制
- 增强主题切换功能
- 完善对比模式体验

---

记住：这个项目的核心目标是帮助 JavaScript 开发者快速掌握 Python，因此所有的解释和示例都应该从这个角度出发，并充分利用 PythonEditor 组件提供交互式学习体验。 